INTRODUCTION                                 *projectlocal-vim* *projectlocal*

Load your project configurations safely, for vim and neovim. Write your
project configurations in vimscript, lua or json - and have it loaded safely
without the use of |exrc| and |secure|.

Written with <3 in TypeScript and Deno (|denops.vim|).

CONFIGURATION                                            *projectlocal-config*

By default, you don't need to specify any configuration to setup for this
plugin, however, there are some configurations you might want to change.

Below are the configurations, which can be defined and will be picked up by
the plugin automatically:

Vimscript
>
    let g:projectlocal = {
        \ 'enableMessages': v:true,
        \ 'defaultRootFile': 'json',
	\ 'rootFiles': {
	    \ 'json': '.vimrc.json',
	    \ 'lua': '.vimrc.lua',
	    \ 'vim': '.vimrc',
	\ },
        \ 'debugMode': v:false,
        \ }
<

Lua
>
    vim.g.projectlocal = {
        enableMessages = true,
        defaultRootFile = 'json',
	rootFiles = {
	    json = '.vimrc.json',
	    lua = '.vimrc.lua',
	    vim = '.vimrc',
	},
        debugMode = false,
    }
<

                                          *projectlocal-config-enableMessages*
"enableMessages" (default: true) is used to enable/disable messages that are
printed on the commandline to show the progress of the plugin.

                                         *projectlocal-config-defaultRootFile*
"defaultRootFile" (default: "json") is the default root file that will be
used when you create a new project config file with |:ProjectLocalConfig|
without any arguments. This value here is mapped to `rootFiles` keys.

                                                    *projectlocal-config-file*
"rootFiles" are the list of files that will be used by |:ProjectLocalConfig|
to be created as a project config file. The keys are used in `defaultRootFile`
to specify a default file if not provided in |:ProjectLocalConfig|.

Defaults
>
    vimscript
    { 'json': '.vimrc.json', 'lua': '.vimrc.lua', 'vim': '.vimrc' }
<

>
    lua
    {
	json = '.vimrc.json',
	lua = '.vimrc.lua',
	vim = '.vimrc',
    }
<

Note, when running |:ProjectLocalConfig| it will use the first file defined
in the list, so by default a `.vimrc.json` file is created by default from
the list.

                                                  *projectlocal-configs-debug*
"debugMode" (default: false) is used to be able to output a log for debugging
issues found in the plugin. (Currently not implemented)

GETTING STARTED                                 *projectlocal-getting-started*

This example will go through setting up a simple config file in the project
directory and set a global variable.

+ Navigate to a project directory and open vim.
+ Then run the command |:ProjectLocalConfig| to create an empty json file.
+ Add the following to the json file:

>
    {
	"projectlocal": {
	    "globalVars": {
		"greet": "Hello World"
	    }
	}
    }
<

+ Re-open vim, and you will get a prompt to accept the file to be executed.
+ Once you accept you can then check if the variable have be set by running
  `:echom g:greet`

Check |projectlocal-json-config| from more options.

---

Here is another example, creating a lua config file and setting up a language
server.

+ Navigate to a project directory and open vim.
+ Then run the command |:ProjectLocalConfig lua| to create an empty json file.
+ Add the following to the lua file:

>
    -- Powered by projectlocal-vim
    -- https://github.com/creativenull/projectlocal-vim

    local lspconfig = require('lspconfig')
    local projectlocal = require('projectlocal.lsp')

    lspconfig.tsserver.setup(projectlocal.get_config())
<

+ Re-open vim, and you will get a prompt to accept the file to be executed.
+ Once you accept, you can then check if the LSP was register by running
  `:LspInfo` and checking the entry for tsserver.

Couple things to note here, you will see we require'd the `projectlocal.lsp`
module to use the `get_config()` function and that is because nvim-lsp has a
couple things that needs setup (for example, the `on_attach` function to
register LSP-related keymaps).

So for those purposes, we have `get_config()` so that it can be provided to
you. To set them up for LSPs, you will need the following in your personal
config (not the config file that will be in the project directory):

>
    require('projectlocal.lsp').setup({
      on_attach = on_attach,
      capabilities = capabilities,
    })
<

Where, `on_attach` and `capabilities` are the variables that you would use
to setup for `nvim-lspconfig` plugin.

Once you've defined them in the `setup()` function, they will then be
available in `get_config()` within the project config lua file.

JSON CONFIGURATION                                  *projectlocal-json-config*

If you want a more simplified way of setting up local configuration for your
project, you can use a .json file instead. But there is limited
support on what you can do with it, since it's aim is to simplify setup when
needed especially when configuring lsp clients (like the builtin nvim-lsp).

GETTING STARTED WITH A JSON CONFIGURATION FILE

To get started, first create a json config file with `:ProjectLocalConfig json`.
This will create a project local file with a .json extension with a templated
json structure, which would look like the following:

>
    {
        "projectlocal": {

	}
    }
<

Supported built-in options and plugins:

+ nvim-lsp
+ globalVars
+ ale
+ efmls-configs-nvim
+ diagnosticls-configs-nvim

NVIM-LSP

"nvim-lsp" is for setting up builtin nvim-lsp. Note, this will only work for
nvim >= 0.6 and not for vim 8. It takes an object structure of LSP servers
that are supported with nvim-lspconfig. Here is an example to setup
`tsserver` with a root_dir set to the tsconfig.json and `pyright` with
defaults:

>
    {
        "projectlocal": {
            "nvim-lsp": [
		"pyright",
		{
		    "name": "tsserver",
		    "config": { "root_dir": ["tsconfig.json"] }
		}
	    ]
        }
    }
<

NVIM-LSP - PROVIDING THE ON_ATTACH FUNCTION (OR CAPABILITIES)

For a .json config file, there is no way to be able to add an `on_attach`
function to the LSP server of your choice. In order to add the function, you
can use the provided lua code to provide projectlocal with your `on_attach`
and even your `capabilities`, which will then in turn add them to the LSP
server setup with your .json file (for init.vim files you can wrap this in
|lua-heredoc|):

>
    local function on_attach()
        print('attached')
    end

    require('projectlocal.lsp').setup({
        -- your custom on_attach
        on_attach = on_attach 
    })
<

GLOBAL VARIABLES - SETUP

"globalVars" is for setting up `g:` variables, where the first level of the
structure is converted to a `g:` variable, this is useful for setting up
plugins that need a global variable config, like ALE. Here is an
example setting up ALE linters and fixers for a javascript project:

>
    {
        "projectlocal": {
            "globalVars": {
                "greet": "Hello World"
            }
        }
    }
<

This will convert and set to the vimscript equivalent:

>
    let g:greet = 'Hello World'
<

ALE - SETUP

"ale" if for setting up ALE linters and fixers. The ALE plugin is required
before you can set this up. Here is an example below:

>
    {
        "projectlocal": {
            "ale": {
                "fixers": {
		    "javascript": ["prettier"]
		},
		"linters": {
		    "javascript": ["eslint"]
		}
            }
        }
    }
<

EFMLS-CONFIGS - SETUP

"efmls" is for setting up efm language server with the help of efmls-config-nvim
plugin. The efm language server and the efmls-config-nvim plugin is required
to be installed. Follow the links below for instructions:

+ Language server: https://github.com/mattn/efm-langserver
+ Plugin: https://github.com/creativenull/efmls-configs-nvim

Here is an example of setting up efmls for a javascript file:

>
    {
        "projectlocal": {
            "efmls": {
                "javascript": {
		    "formatter": ["prettier"],
		    "linter": ["eslint"]
		},
            }
        }
    }
<

DIAGNOSTICLS-CONFIGS - SETUP

"diagnosticls" is for setting up diagnostic language server with the help of
diagnosticls-config-nvim plugin. The diagnostic language server and the
diagnosticls-config-nvim plugin is required to be installed. Follow the links
below for instructions:

+ Language server: https://github.com/iamcco/diagnostic-languageserver
+ Plugin: https://github.com/creativenull/diagnosticls-configs-nvim

Here is an example of setting up efmls for a javascript file:

>
    {
        "projectlocal": {
            "diagnosticls": {
                "javascript": {
		    "formatter": ["prettier"],
		    "linter": ["eslint"]
		},
            }
        }
    }
<

COMMANDS	                                       *projectlocal-commands*

                                *:ProjectLocalConfig*
ProjectLocalConfig
                                Open the project config file, if it exists. If
                                not, then create a new file specified by
                                `g:projectlocal.file`. If provided `file` is
                                empty or not provided, use the first file
                                provided in |projectlocal-config-file|.

                                When creating a new file, you can provided the
                                filetype of the config file to be generated.
                                Accepts the following types: "json", "lua",
                                "vim".

                                This example creates a .vimrc.json file if
                                there are no files that exists in the project:

                                    `:ProjectLocalConfig json`

                                *:ProjectLocalConfigAutoloadEnable*
ProjectLocalConfigAutoloadEnable
                                Enable auto sourcing, if it was disabled.
                                This means on the next time you open vim
                                and the local project config has changed
                                then it will ask the user to allow sourcing
                                the file. If there were no changes on the
                                local project config file then source it
                                automatically.

                                *:ProjectLocalAutoloadDisable*
ProjectLocalAutoloadDisable
                                Disable auto sourcing, if it was enabled.
                                This means the next time you open vim then
                                it will not automatically source the local
                                project config file, but can manually load
                                the file via |:ProjectLocalLoad|.

                                *:ProjectLocalLoad*
ProjectLocalLoad
                                Manually source the local project config
                                file if autoload is disabled.

 vim:tw=78:ts=8:noet:ft=help:norl:
